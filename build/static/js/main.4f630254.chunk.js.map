{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js"],"names":["ComponentHeader","observer","history","useHistory","useStores","UserStore","AuthStore","StyledLink","to","activeClassName","exact","Login","currentUser","attributes","username","StyledButton","onClick","logout","console","log","push","styled","Button","div","Header","header","NavLink","ComponentFooter","Footer","footer","Loading","Home","lazy","History","About","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDom","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","AV","init","appId","appKey","serverURL","Auth","register","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginUser","login","logIn","logOut","getCurrentUser","current","Uploader","add","file","filename","item","Object","avFile","File","set","save","serverFile","find","page","limit","query","Query","include","skip","descending","equalTo","result","err","this","observable","action","newList","list","concat","isLoading","append","length","hasMore","finally","newFilename","newFile","isUploading","isLogin","values","pullUser","resetUser","HistoryStore","reset","ImageStore","context","createContext","stores","useContext"],"mappings":"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","file":"static/js/main.4f630254.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink,useHistory} from 'react-router-dom'\nimport styled from 'styled-components'\nimport {Button} from \"antd\";\nimport {useStores} from \"../stores\";\nimport {observer} from 'mobx-react'\n\nconst ComponentHeader = observer(()=> {\n  const history = useHistory()\n  const {UserStore,AuthStore} = useStores()\n  const handleLogout= ()=>{\n    AuthStore.logout()\n  }\n  const handLogin = ()=>{\n    console.log('跳转登陆页面')\n    history.push('/login')\n  }\n  const handRegister = ()=>{\n    console.log('跳转注册页面')\n    history.push('/register')\n  }\n  return (\n    <Header>\n      <nav>\n        <StyledLink to='/' activeClassName='active' exact>首页</StyledLink>\n        <StyledLink to='/hiStory' activeClassName='active'>历史</StyledLink>\n        <StyledLink to='/about' activeClassName='active'>关于我</StyledLink>\n      </nav>\n      <Login>\n        {\n          UserStore.currentUser ?\n            <>\n              {UserStore.currentUser.attributes.username} <StyledButton onClick={handleLogout} >注销</StyledButton>\n            </> :\n            <>\n              <StyledButton onClick={handLogin}>登录</StyledButton>\n              <StyledButton onClick={handRegister}>注册</StyledButton>\n            </>\n        }\n      </Login>\n    </Header>\n  )\n})\n\nexport default ComponentHeader\nconst StyledButton = styled(Button)`\n  margin-left:10px;\n`\nconst Login = styled.div`\n    margin-left:auto;\n`\nconst Header = styled.header`\n    padding:10px 50px;\n    display:flex;\n    align-items: center;\n    background-color:#f6d186;\n    color:#333;\n`;\nconst StyledLink = styled(NavLink)`\n    margin-right:30px;\n    color:#333;\n    &.active{\n       color:#fff;\n    }\n`","import React from 'react'\nimport styled from 'styled-components'\nfunction ComponentFooter() {\n    return (\n        <Footer>\n          <div>请勿上传违反图片，违者后果自负</div>\n            <p>© 西柚图床</p>\n        </Footer>\n    )\n}\nexport default ComponentFooter\nconst Footer = styled.footer`\n    padding:10px 10px;\n    text-align:center;\n    font-size:12px;\n`\n","import React from 'react'\nexport default function Loading() {\n  return (\n    <>\n      <div>Loading...</div>\n    </>\n  )\n}\n","import React, { Suspense, lazy } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Loading from './components/Loading'\nimport {\n  Switch,\n  Route\n} from 'react-router-dom'\n\nconst Home = lazy(() => import('./pages/Home'))\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Register = lazy(() => import('./pages/Register'))\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/history' component={History} />\n            <Route path='/about' component={About} />\n            <Route path='/login' component={Login} />\n            <Route path='/register' component={Register} />\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDom from 'react-dom'\nimport App from './App'\nimport 'antd/dist/antd.css'\nimport * as serviceWorker from './serviceWorker'\nimport Modal from './models'\nimport {\n  HashRouter as Router\n} from 'react-router-dom'\n\nReactDom.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n)\nserviceWorker.unregister();","import AV, { Query, User,File } from 'leancloud-storage';\n\nAV.init({\n  appId: \"a7132GyWWG8LkecksE1vUPoV-gzGzoHsz\",\n  appKey: \"mJ4tmFdH193RFitpM3mdbmpl\",\n  serverURL: \"https://a7132gyw.lc-cn-n1-shared.com\"\n});\n\nconst Auth = {\n  register(username, password) {\n    let user = new User()\n    user.setUsername(username)\n    user.setPassword(password)\n    return new Promise((resolve, reject) => {\n      user.signUp().then(loginUser => {\n        resolve(loginUser)\n      }, error => {\n        reject(error)\n      })\n    })\n  },\n  login(username, password) {\n    return new Promise((resolve, reject) => {\n      User.logIn(username, password).then(loginUser =>\n          resolve(loginUser)\n        , error => {\n          reject(error)\n        }\n      );\n    })\n  },\n  logout(){\n    User.logOut()\n  },\n  getCurrentUser(){\n    return User.current()\n  }\n\n};\nconst Uploader = {\n  add(file, filename) {\n    const item = new AV.Object('Img');\n    const avFile = new File(filename, file);\n    item.set('filename', filename);\n    item.set('owner', User.current());\n    item.set('url', avFile);\n    return new Promise((resolve, reject) => {\n      item.save().then(serverFile => resolve(serverFile), error => reject(error));\n    });\n  },\n  find({page=0,limit=10}){\n    const query = new AV.Query('Img')\n    query.include('owner')\n    query.limit(limit)\n    query.skip(page*limit)\n    query.descending('createdAt')\n    query.equalTo('owner',AV.User.current())\n    return new Promise((resolve, reject) => {\n      query.find()\n        .then(result=>{resolve(result)})\n        .catch(err=>reject(err))\n    })\n  }\n}\n\nexport {Auth,Uploader}","import {observable, action} from 'mobx'\nimport {Auth} from '../models'\n\nclass UserStore {\n\n  @observable currentUser = null\n\n  @action pullUser(){\n    this.currentUser = Auth.getCurrentUser()\n  }\n\n  @action resetUser(){\n    this.currentUser = null\n  }\n}\n\nexport default new UserStore()","import {observable, action} from 'mobx'\nimport {Uploader} from '../models'\nimport {message} from \"antd\";\n\nclass HistoryStore {\n\n  @observable list = [];\n  @observable isLoading = false;\n  @observable hasMore = true;\n  @observable page = 0;\n  limit = 10;\n\n  @action append(newList) {\n    this.list = this.list.concat(newList)\n  }\n\n  @action find() {\n    this.isLoading = true\n    Uploader.find({page: this.page, limit: this.limit})\n      .then(newList => {\n        this.append(newList);\n        this.page++;\n        if (newList.length < this.limit) {\n          this.hasMore = false\n        }\n      }).catch(err => {\n      message.error('加载数据失败')\n      console.log(err)\n    }).finally(() => {\n      this.isLoading = false;\n    })\n  }\n\n  @action reset() {\n    this.list = [];\n    this.isLoading = false;\n    this.hasMore = true;\n    this.page = 0;\n  }\n}\n\nexport default new HistoryStore()","import {observable, action} from 'mobx'\nimport {Uploader} from '../models'\nimport {message} from \"antd\";\n\nclass ImageStore {\n  @observable filename = '';\n  @observable file = null;\n  @observable isUploading = false;\n  @observable serverFile = null;\n\n  @action setFilename(newFilename){\n    this.filename = newFilename\n  }\n  @action setFil(newFile){\n    this.file = newFile\n  }\n  @action upload(){\n    this.isUploading = true\n    this.serverFile = null\n    return new Promise((resolve, reject) => {\n      Uploader.add(this.file,this.filename)\n        .then(serverFile=>{\n          this.serverFile = serverFile\n          resolve(serverFile)\n        }).catch(err=>{\n          reject(err)\n        message.error('上传失败')\n        console.error('上传失败')\n      }).finally(()=>{\n        this.isUploading = false\n      })\n    })\n  }\n  @action reset(){\n  this.isUploading = false;\n  this.serverFile = null;\n  }\n\n}\n\nexport default new ImageStore()","import {observable, action} from 'mobx'\nimport {Auth} from '../models'\nimport UserStore from './user'\nimport {message} from \"antd\";\nimport HistoryStore from './history'\nimport ImageStore from './image'\n\nclass AuthStore {\n\n  @observable values = {\n    username: '',\n    password: ''\n  }\n\n  @action setIsLogin(isLogin) {\n    this.isLogin = isLogin\n  }\n\n  @action setUsername(username) {\n    this.values.username = username\n  }\n\n  @action setPassword(password) {\n    this.values.password = password\n  }\n\n  @action login() {\n    return new Promise((resolve, reject) => {\n      Auth.login(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser();\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('登录失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action register() {\n    return new Promise((resolve, reject) => {\n      Auth.register(this.values.username, this.values.password)\n        .then(user => {\n          UserStore.pullUser();\n          resolve(user)\n        })\n        .catch(err => {\n          UserStore.resetUser()\n          message.error('注册失败')\n          reject(err)\n        })\n    })\n  }\n\n  @action logout() {\n    Auth.logout()\n    UserStore.resetUser()\n    HistoryStore.reset()\n    ImageStore.reset()\n  }\n}\n\nexport default new AuthStore()","import  { createContext, useContext } from 'react'\nimport  AuthStore  from './auth'\nimport UserStore from './user'\nimport ImageStore from './image'\nimport HistoryStore from \"./history\";\n\nconst context = createContext({\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n})\nwindow.stores = {\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n}\nexport const useStores = () => useContext(context)"],"sourceRoot":""}